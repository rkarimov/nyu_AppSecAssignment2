### To the grader: I did a seperate write up with screenshots. Please see the file "Assignment 2 - full writeup with screenshots.pdf" in the main repo. Thanks

1. Attack exploiting XSS (cross-site scriptiong) vulnerability 
In this attack, I started by searching for what parameters can be exploited for XSS in Django-based applications. 
This is where I found ‘safe’ tag is often used to exploit XSS (https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html). 
I then deployed my XSS payload to align with html pages where the ‘safe’ tag appears and created my payloads as follows: 
http://127.0.0.1:8000/gift/?director=<script>alert("xss exploited, muhahaha!")</script>
http://127.0.0.1:8000/gift.html?director=<script>alert("muhahaha! xss exploit")</script>
http://127.0.0.1:8000/buy/?director=<script>alert("plz fix xsss exploit")</script>

XSS Fix: 
I started this fix by exploring each of the files and noticed a comment which said "<!-- KG: I don't think the safe tag does what they thought
it does... -->" I then explored what this 'safe' tag meant in Django and found that per reference docs (https://docs.djangoproject.com/en/4.1/ref/templates/builtins/#std-templatefilter-safe), which I found would disable the HTML escape protection. 
Thus, if the HTML scape protection is disabled, one can conduct XSS attacks according to this doc: https://www.acunetix.com/blog/articles/preventing-xss-attacks/
Finally, I removed the 'safe' tag from all files where its shown which in this case were the files 'item-single.html; and 'gift.html'. I re-tested after deploying this fix and found that it worked!!!

2. CSRF 
The Cross-Site Request Forgery attack is when a threat actor forges a request via the same session that the victim is using and sends their malicious request with the victims' validation token to the website for fulfillment. CSRF was initally very tricky to exploit as most modern browsers block CSRF exploit by setting SameSite=Strict, which mitigates the risk of cookies being used for CSRF attacks on authentication in which sessionid cookie was sent. 
Therefore, I had to get creative when delivering the payload. Following guidance from https://portswigger.net/web-security/csrf article, I decided to spin up a local server by running "python3 -m http.server 1777". 

—- Payload —----
<html>
  <body>    
    <form action="http://127.0.0.1:8000/gift/0" method="POST">
      <input type="hidden" name="username" value="threat_actor" />
      <input type="hidden" name="amount" value="127" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>

<!--- source: https://portswigger.net/web-security/csrf -->


Then, when navigating to this local server, I simply clicked on the csrfPayload.html which sent a forged request to the database to insert value of 127 for the threat_actor user. 
To verify that the exploit was successful on the database side, I navigated to the auth_user table in which I saw that value of 127 was posted for the threat_actor, which thereby indicates that it worked. 

CSRF Fix: 
In order to fix the CSRF vulnerability, I did research on the underlining authentication mechanism for ensuring the integrity of requests. Specifically, I looked at mechanisms that would mitigate CSRF for Django applications. 
This is where I stumbled upon this article (https://docs.djangoproject.com/en/4.1/ref/csrf/) which described adding @csrf_protect tag to respective files (in this case views.py file) as a way to mitigate CSRF attack. 
Additionally, I added the >{% csrf_token %} flag to the gift.html file, which would create the token when the user POST action on sending the gift, further mitigating the risk of this attack on the front end and manipulating the amount or username in post request and done in accordance with the aforementioned article suggestion. 
Finally, subsequent tests yielded a 403 forbidden page "CSRF verification failed. Request aborted.", which means the attack was successfully blocked!


3. SQL Injection to obtain salted password for a users name is 'admin'
In order to do this, I first looked through all the files to determine where the SQL commands are passed. This is where I found 'views.py' file which had the comments 
"# KG: Where is this data coming from? RAW SQL usage with unkown # KG: data seems dangerous." This made me look closer to see where I can run a POST to interact with all elements of the database. 
This made me look at use-card.html file which is referenced in views.py file and allows the end user to upload a file with the extension '.gftcrd' 

I then explored a way to craft a SQL injection payload which I did in file 'SQLInjection.gftcrd' using the columns that were revealed in http://127.0.0.1:8000/views.html; 
I put together the following payload in accordance with the instructions that I found on https://portswigger.net/web-security/sql-injection/cheat-sheet

 {"merchant_id": "NYU Apparel Card", "customer_id": "user", "total_value": "1234", "records": [{"record_type": "amount_change", "amount_added": 123456,"signature": "'UNION SELECT password FROM LegacySite_user WHERE username = 'admin'--"}]}

Once I uploaded the file and hit “Submit a card” I got the following returned TypeError at /use.html error page revealed hashed and salted password for admin as follows which indicates the attack worked!:

000000000000000000000000000078d2$fd58fe95167445090ba0fc7c3b400fac1bf5aa96760d52724b6d6a7f750204b6

SQL Injection Fix: 
In order to fix the SQL Injection exploit, I wrapped the signature variable in views.py file in brackets which helps mitigate the use of special characters which therefore prevents special characters from being executed by the query engine. 
In other words, I turned this into a parameterized query by making ‘signature’ that holds the payload parameterized. 
I did this in accordance with suggestion from the article: https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html

Subsequent tests after adding the fix yielded the ‘ValueError at /use.html’ page which did not contain the Card object details previously exposed which means the issue has been fixed!

4. Code Injection
Following the suggestion from the instructions, I looked for a function which processed the giftcardreader binary and this is where I came across the parse_card_data() function which parsed the card file and card path name from the upload. 
From there, I noticed the comment “  # KG: Are you sure you want the user to control that input?” So I tried injecting a simple echo “hacked” payload into the upload file name box on page http://127.0.0.1:8000/use.html However, this did not work. 
I then went back to views.py to see how the entry is processed and realized that I was missing a file with the correct format (ending in “.gftcrd”) which is what actually triggers the execution on the server end. However, this still didn’t work. 
I then looked closer at how commands are rendered and found that requests all include ‘gift’ in them, so I tried my command injection again by running “gift;ifconfig;ls;” to simply see if I could get the ifconfig of the environment and list of files. 
I added the ‘;’ because these act as pipes to string the commands. 

I was then directed to the “JSONDecodeError at /use.html” page, which didn’t have any clear indicators of commands. 
However, I then looked at the debug logs in django terminal and saw the ifconfig output and the files listed right after the segmentation fault error! 
This means the command injection was indeed successful via this vector! Using this article (https://portswigger.net/web-security/os-command-injection), I was able to confirm that this was indeed an OS level injection which is why I didn’t see the output on error page but instead in the terminal. 

4. Code Injection fix 
When looking at the potential fix for this, I tried looking at what allows this command to process in such order.
This is where I found that its all about the ‘;’ pipe that's added between commands which strings everything together. 
Thus, even if someone was to inject a command, they would need ‘;’ to string it together for execution. 
Accordingly, I added a simple check for this parameter in parse_card_data() function in which it would only retrieve the name if ‘;’ was not present

After the fix was implemented, subsequent tests returned me to ‘UnboundLocalError at /use.html’ page which indicated that a command was being rejected altogether. 
Next, I looked at the django debug log which did not have any output beyond the error “UnboundLocalError: local variable 'ret_val' referenced before assignment” which indicates that the exploit has been fixed!!